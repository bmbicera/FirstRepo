test2 Update
test2 update
(line: 2722 - 2749)
		
		4.1) if transaction.FinancialTransactionId Or 0 == 0
			(line: 2432 - 2509)
			
			4.1.1 if the CorpID == 2 and transaction.BillingPlanId >= 1 it will flag the IsAnnualUBC as true.(will be use later as a condition)
				(line:2437 - 2440)
			
			4.1.2 If IsAnnualUBC is true and TranType != "AR", it will then check the transaction.TransactionType if it is a "Refund" or not
					and if it is "Refund" it will run the method upsellHandleRefund(), if not then run the method upsellHandleAuthorization()
				(line: 2444- 2458)
				
				//Methods
				upsellHandleRefund() (line: 2728 - 2830) //called when transactionType is "Refund"
					- accepts parameter of string BatchType, string CCNumber, int OrderNumber, decimal Amount, bool Approved, string AuthCode,
					string DeclineReason, string TxnId, int FinancialTransactionID, DateTime TransactionDate, int MerchantId
					
					-it is responsible for creating FinancialTransaction records
					
					-it is also responsible for creating OrderNotes
			
				upsellHandleAuthorization() (line: 2831 - 3547)  //called when transactionType is not "Refund"
					- accepts parameter of string BatchType, string CCNumber, int OrderNumber, decimal Amount, bool Approved, string AuthCode,
					string DeclineReason, string TxnId, DateTime TransactionDate, int MerchantId
					
					
				
				
			4.1.3 If IsAnnualUBC is false
				
				if ipPreAuth != null && transaction.TransactionType == "PreAuth" && Message.StartsWith("APPROVED") it will call the  UpdateIPPreAuthDates()
					(line: 2462- 2466)
					UpdateIPPreAuthDates - updates the IPPreAuthDate,IPCaptureDate,CreditCardPreAuthorizationNumber,IPBillDate and create OrderNotes
				
				else if ipPreAuth == null && transaction.TransactionType == "PreAuth" it will call the usp_Billing_UpdateOrderFromPreAuthIPNSF that accepts a parameter of TransactionID
					(line: 2467- 2475)
					
				else it will call the getExistingFinancialTransactionId that accepts parameter of orderNumber and merchantTransactionId and return it to variable of financialTransId
					
					if financialTransId is 0 it will call the handleAuthorization() 
					
					handleAuthorization() - 
test update

VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "Order_Exporter_PSOnline"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Dim objConn As New ADODB.Connection
Dim objConn2 As New ADODB.Connection
Dim objRS As New ADODB.Recordset
Dim objRS2 As New ADODB.Recordset

Public Function Export(Path As String) As String
    
    Dim strSQL As String
    Dim thisLine As String
    Dim OrderCount As Integer
    Dim ExportDate As String
    
    Dim i As Integer
    
    objConn.ConnectionString = ini.Item("ConnectionString")
    objConn.Open
    
    objConn2.ConnectionString = ini.Item("ConnectionString")
    objConn2.Open
    
    objRS.ActiveConnection = objConn
    objRS2.ActiveConnection = objConn2
    
    Path = Path & "\" & Year(Date) & "-" & Month(Date) & "-" & Day(Date)
    
    On Error Resume Next
    MkDir Path
    On Error GoTo 0
    
    Open Path & "\PSOnline.csv" For Output As #1
    
    'Print Field List
    Call printFieldList("OrderHeader", "OH")
    Call printFieldList("Customers", "C")
    Call printFieldList("OrderNotes", "ON")
    Call printFieldList("OrderLineItem", "OL")
    Call printFieldList("FinancialTransactions", "FT")
    
    'Print OrderHeader
    strSQL = ""
    strSQL = strSQL & " SELECT *"
    strSQL = strSQL & " FROM OrderHeader"
    strSQL = strSQL & " WHERE "
    
    objRS.Open strSQL
    
    Do While Not objRS.EOF
        
        thisLine = "OH"
        
        For i = 0 To objRS.Fields.Count - 1
            thisLine = thisLine & ",""" & objRS(i) & """"
        Next i
        
        Print #1, thisLine
        
        Call printCustomer(objRS("CustomerNumber"))
        Call printRecordType("OrderNotes", "ON", objRS("OrderNumber"))
        Call printRecordType("OrderLineItem", "OL", objRS("OrderNumber"))
        Call printRecordType("FinancialTransactions", "FT", objRS("OrderNumber"))
        
        objRS.MoveNext
        
        OrderCount = OrderCount + 1
        
        Debug.Print OrderCount
        
        DoEvents
        
    Loop
    
    objRS.Close
    
    Close #1
    
    sendToLog "   Exported " & OrderCount & " orders."
    
End Function

Private Sub printFieldList(table As String, recordType As String)
    
    Dim thisLine As String
    Dim i As Integer

    objRS2.Open "SELECT TOP 1 * FROM " & table
    thisLine = "Fields_" & recordType
    For i = 0 To objRS2.Fields.Count - 1
        thisLine = thisLine & ",""" & objRS2.Fields(i).name & """"
    Next i
    Print #1, thisLine
    objRS2.Close

End Sub

Private Sub printCustomer(CustomerNumber As String)

    Dim thisLine As String
    Dim i As Integer
    Dim val As String

    objRS2.Open "SELECT * FROM Customers WHERE CustomerNumber=" & CustomerNumber
    
    Do While Not objRS2.EOF
        thisLine = "C"
        For i = 0 To objRS2.Fields.Count - 1
            If IsNull(objRS2(i)) Then
                val = ""
            Else
                val = objRS2(i)
            End If
            thisLine = thisLine & ",""" & cleanValue(val) & """"
        Next i
        Print #1, thisLine
        objRS2.MoveNext
    Loop
    
    objRS2.Close

End Sub

Private Sub printRecordType(table As String, recordType As String, OrderNumber As String)

    Dim strSQL As String
    Dim thisLine As String
    Dim i As Integer
    Dim val As String
    
    strSQL = "SELECT " & table & ".*"
    strSQL = strSQL & " FROM " & table
    strSQL = strSQL & " WHERE OrderNumber=" & OrderNumber

    objRS2.Open strSQL
    
    Do While Not objRS2.EOF
        thisLine = recordType
        For i = 0 To objRS2.Fields.Count - 1
            If IsNull(objRS2(i)) Then
                val = ""
            Else
                val = objRS2(i)
            End If
            thisLine = thisLine & ",""" & cleanValue(val) & """"
        Next i
        Print #1, thisLine
        objRS2.MoveNext
    Loop
    
    objRS2.Close
    
End Sub

Private Function cleanValue(val As String) As String
    
    val = Replace(val, Chr(34), "=")    'Double Quote
    val = Replace(val, Chr(44), "-")    'Single Quote
    val = Replace(val, Chr(39), ".")    'Comma
    val = Replace(val, Chr(10), "/")    'Line Feed
    val = Replace(val, Chr(13), "")     'Carriage Return
    
    cleanValue = val
    
End Function

<<updated of test 2
    strSQL = "SELECT " & table & ".*"
    strSQL = strSQL & " FROM " & table
    strSQL = strSQL & " WHERE OrderNumber=" & OrderNumber

    objRS2.Open strSQL
    
    Do While Not objRS2.EOF
        thisLine = recordType
        For i = 0 To objRS2.Fields.Count - 1
            If IsNull(objRS2(i)) Then
                val = ""
            Else
                val = objRS2(i)
            End If
            thisLine = thisLine & ",""" & cleanValue(val) & """"
        Next i
        Print #1, thisLine
        objRS2.MoveNext
    Loop
    
    objRS2.Close
    
End Sub

Private Function cleanValue(val As String) As String
    
    val = Replace(val, Chr(34), "=")    'Double Quote
    val = Replace(val, Chr(44), "-")    'Single Quote
    val = Replace(val, Chr(39), ".")    'Comma
    val = Replace(val, Chr(10), "/")    'Line Feed
    val = Replace(val, Chr(13), "")     'Carriage Return
    
    cleanValue = val


